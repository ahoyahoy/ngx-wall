import { ChangeDetectorRef, ComponentFactoryResolver, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { StickyModalRef, StickyModalService } from 'ngx-sticky-modal';
import { Subject, Subscription } from 'rxjs';
import { BaseTextBrickComponent } from '../../base-text-brick/base-text-brick.component';
import { ITextBrickApi } from '../text-brick-api.interface';
import { IWallModel } from '../../../wall/model/interfaces/wall-model.interface';
export declare class TextBrickComponent extends BaseTextBrickComponent implements OnInit, OnDestroy, ITextBrickApi {
    private zone;
    private ngxStickyModalService;
    private cd;
    private componentFactoryResolver;
    private el;
    wallModel: IWallModel;
    placeholder: any;
    brickSelectionModalRef: StickyModalRef;
    contextMenuModalRef: StickyModalRef;
    up$: Subject<{}>;
    down$: Subject<{}>;
    enter$: Subject<{}>;
    selectedTag$: Subject<string>;
    subscriptions: Subscription[];
    selectionInfo: {
        ranges: Range[];
        selectedLink: HTMLElement;
    };
    api: ITextBrickApi;
    constructor(zone: NgZone, ngxStickyModalService: StickyModalService, cd: ChangeDetectorRef, componentFactoryResolver: ComponentFactoryResolver, el: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onBlur(): void;
    onFocus(): void;
    onKeyPress(e: KeyboardEvent): void;
    onClick(event: MouseEvent): void;
    topKeyPressed(e: KeyboardEvent): void;
    bottomKeyPressed(e: KeyboardEvent): void;
    enterKeyPressed(e: KeyboardEvent): void;
    getSplittedText(offset: number, target: Node): {
        left: string;
        right: string;
    };
    escapeKeyPressed(e: KeyboardEvent): void;
    onTextChange(): void;
    openBricksListModal(): void;
    onPaste(e: ClipboardEvent): void;
    onTextSelection(): void;
    bold(): void;
    italic(): void;
    createLink(url: string): void;
    getSelectedLinkHref(): string;
    unlink(): void;
    changeLinkUrl(url: string): void;
    isLinkSelected(): boolean;
    saveSelection(): void;
    restoreSelection(): void;
    private getSelectedLink;
    private triggerEditorChange;
    private showContextModal;
    private getSelectedRanges;
    private extractImageDataTransferItem;
    private isTag;
    private hideBricksList;
    private hideContextMenuModal;
    private findParentLink;
    private findLinkBetweenNodes;
    private isHTMLElement;
}
